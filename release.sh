#!/usr/bin/env bash

set -e
set -o pipefail

# Variables globales
CURRENT_DIR=$(pwd)
DORA_REPOSITORY=git@github.com:gip-inclusion/dora.git

# Couleurs ANSI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color (reset)

# ===
# 1. PREPARE
# ===

# ---
# Check param(s)
# ---

# V√©rification de l'argument release_type
if [ -z "$1" ]; then
  echo -e "${RED}‚ö†Ô∏è  Vous devez sp√©cifier le type de release (major, minor, patch).${NC}"
  exit 1
fi

RELEASE_TYPE=$1

# V√©rification que release_type est valide
if [[ "$RELEASE_TYPE" != "major" && "$RELEASE_TYPE" != "minor" && "$RELEASE_TYPE" != "patch" ]]; then
  echo -e "${RED}‚ö†Ô∏è  Type de release invalide : '$RELEASE_TYPE'. Utilisez uniquement 'major', 'minor' ou 'patch'.${NC}"
  exit 1
fi

# ---
# Check environment and rights
# ---

# Fonction pour v√©rifier l'existence d'une variable d'environnement
check_env_var_is_set() {
  local var_name=$1
  if [ -z "${!var_name}" ]; then
    echo -e "${RED}‚ö†Ô∏è  La variable d'environnement $var_name doit √™tre d√©finie.${NC}"
    exit 1
  fi
}

# V√©rification des variables d'environnement requises
check_env_var_is_set "SCALINGO_REGION"
check_env_var_is_set "SCALINGO_BACK_APP"
check_env_var_is_set "SCALINGO_FRONT_APP"

# V√©rification que le CLI Scalingo est install√©
if ! command -v scalingo &> /dev/null; then
  echo -e "${RED}‚ö†Ô∏è  Le CLI Scalingo n'est pas install√©. Veuillez l'installer avant d'ex√©cuter ce script.${NC}"
  exit 1
fi

# V√©rification de l'acc√®s aux applications Scalingo
echo "${CYAN}üîç V√©rification des permissions Scalingo...${NC}"
APPS_LIST=$(scalingo apps --region "$SCALINGO_REGION")

check_app_access() {
  local app_name=$1
  if echo "$APPS_LIST" | grep -E "^\|[[:space:]]*$app_name[[:space:]]*\|[[:space:]]*collaborator[[:space:]]*\|" &> /dev/null; then
    echo -e "Acc√®s confirm√© pour l'application '$app_name'."
  else
    echo -e "${RED}‚ö†Ô∏è  Vous n'avez pas acc√®s en tant que collaborateur √† l'application '$app_name' dans la r√©gion '$SCALINGO_REGION'. Veuillez v√©rifier vos permissions.${NC}"
    exit 1
  fi
}

check_app_access "$SCALINGO_BACK_APP"
check_app_access "$SCALINGO_FRONT_APP"

# ---
# Utils
# ---

# Fonction pour incr√©menter la version
increment_version() {
  local version=$1
  local release_type=$2

  # Supprimer le 'v' au d√©but et s√©parer en parties (major.minor.patch)
  version="${version#v}"
  IFS='.' read -r major minor patch <<< "$version"

  case $release_type in
    major)
      major=$((major + 1))
      minor=0
      patch=0
      ;;
    minor)
      minor=$((minor + 1))
      patch=0
      ;;
    patch)
      patch=$((patch + 1))
      ;;
    *)
      echo -e "${RED}‚ö†Ô∏è  Type de release non valide. Utilisez major, minor ou patch.${NC}"
      exit 1
      ;;
  esac

  echo "v$major.$minor.$patch"
}

# Fonction pour g√©rer le processus de d√©ploiement
deploy_repo() {
  local repo_url=$1
  local repo_name=$2
  
  echo -e "${CYAN}üì¶ D√©ploiement de l'application ${repo_name}${NC}"

  echo "Clonage du d√©p√¥t $repo_name..."
  git clone "$repo_url"
  cd "$repo_name"

  echo "R√©cup√©ration des branches distantes pour $repo_name..."
  git fetch --all

  # V√©rifier s'il y a des commits d'√©cart entre 'main' et le d√©p√¥t distant
  COMMITS_DIFF=$(git rev-list --count main..origin/main)

  if [ "$COMMITS_DIFF" -gt 0 ]; then
    echo "Il y a $COMMITS_DIFF commit(s) √† d√©ployer pour $repo_name."

    # G√©n√©ration du tag bas√© sur le fichier 'version'
    if [ -f "$CURRENT_DIR/version" ]; then
      CURRENT_VERSION=$(cat "$CURRENT_DIR/version" | tr -d '[:space:]')
      VERSION=$(increment_version "$CURRENT_VERSION" "$RELEASE_TYPE")
      echo "$VERSION" > "$CURRENT_DIR/version"
      echo "üìå Nouvelle version : $VERSION (bas√©e sur le type $RELEASE_TYPE)"
      
      # Ajouter et commiter la nouvelle version du fichier 'version'
      git add "$CURRENT_DIR/version"
      git commit -m "MEP $(date +'%d.%m.%Y') : Mise √† jour de la version √† $VERSION"
      git push origin main

      # Cr√©er et pousser le nouveau tag
      git tag "$VERSION"
      git push origin "$VERSION"
    else
      echo -e "${RED}‚ö†Ô∏è Fichier version introuvable. Impossible de cr√©er le tag.${NC}"
      exit 1
    fi
  else
    echo -e "${YELLOW}üôÖ Pas de commits √† d√©ployer pour $repo_name. Aucun tag ou d√©ploiement effectu√©.${NC}"
  fi

  # D√©ploiement de l'archive sur Scalingo
  if [ -n "$VERSION" ]; then
    echo "üöÄ D√©ploiement de l'archive sur Scalingo pour les applications dora-back et dora-front"
    tag_archive_url="https://github.com/jbuget/dora/archive/refs/tags/$VERSION.tar.gz"
    echo "[dry-run] scalingo deploy --region $SCALINGO_REGION --app $SCALINGO_BACK_APP $tag_archive_url"
    echo "[dry-run] scalingo deploy --region $SCALINGO_REGION --app $SCALINGO_FRONT_APP $tag_archive_url"
    #scalingo deploy --region "$SCALINGO_REGION" --app "$SCALINGO_BACK_APP" "$tag_archive_url"
    #scalingo deploy --region "$SCALINGO_REGION" --app "$SCALINGO_FRONT_APP" "$tag_archive_url"
  else
    echo -e "${RED}‚ö†Ô∏è Version non d√©finie. D√©ploiement Scalingo annul√©.${NC}"
  fi

  # Revenir au r√©pertoire temporaire
  cd ..
  echo ""
}

# ===
# 2. PERFORM
# ===

# D√©but
echo ""
echo -e "${YELLOW}üöÄ D√©marrage de la proc√©dure de livraison${NC}"
echo ""

# Cr√©ation d'un r√©pertoire temporaire
TEMP_DIR=$(mktemp -d)
echo "‚ú® Cr√©ation d'un r√©pertoire temporaire pour le travail : $TEMP_DIR"
cd "$TEMP_DIR"
echo ""

# D√©ploiement
deploy_repo "$DORA_REPOSITORY" "dora"

# Nettoyage
echo "üßπ Nettoyage : retour au r√©pertoire initial et suppression du r√©pertoire temporaire."
cd "$CURRENT_DIR"
rm -rf "$TEMP_DIR"
echo ""

# Fin
echo -e "${GREEN}üéâ Fin de la proc√©dure de livraison${NC}"
echo ""
trap - EXIT